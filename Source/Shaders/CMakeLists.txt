
set(TARGET_NAME Shaders)

set(GLSLANG_PATH ${CMAKE_SOURCE_DIR}/Tools/${PLATFORM_NAME}/glslangValidator)
if(WIN32)
    set(SPIRV_CROSS_PATH ${CMAKE_SOURCE_DIR}/Tools/${PLATFORM_NAME}/spirv-cross)
    set(DXC_PATH ${CMAKE_SOURCE_DIR}/Tools/${PLATFORM_NAME}/dxc)
endif()

set(SPV_OUTPUT_FILES)
set(SHADER_BYTE_OUTPUT_FILES)
set(GLSL_EXECUTABLE_FILES)
set(GLSL_HEADER_FILES)
file(GLOB_RECURSE GLSL_SOURCE_FILES "*.glsl")

foreach(GLSL_FILE ${GLSL_SOURCE_FILES})
    file(RELATIVE_PATH RELATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${GLSL_FILE})
    get_filename_component(BASE_NAME ${RELATIVE_PATH} NAME_WLE)
    get_filename_component(SHADER_DIR ${RELATIVE_PATH} DIRECTORY)
    source_group("Glsl/${SHADER_DIR}" FILES ${GLSL_FILE})
    get_filename_component(BASE_NAME_EXT ${BASE_NAME} EXT)
    if (NOT "${BASE_NAME_EXT}" STREQUAL "")
        list(APPEND GLSL_EXECUTABLE_FILES ${GLSL_FILE}) # collect all glsl that has entry point, which ends with xxx.<stage>.glsl
    else()
        list(APPEND GLSL_HEADER_FILES ${GLSL_FILE}) # collect all glsl header that hasn't entry point, which ends with xxx.glsl
    endif()
endforeach()

foreach(GLSL_FILE ${GLSL_EXECUTABLE_FILES})
    file(RELATIVE_PATH RELATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${GLSL_FILE})
    get_filename_component(SHADER_DIR ${RELATIVE_PATH} DIRECTORY)
    get_filename_component(BASE_NAME ${RELATIVE_PATH} NAME_WLE)
    set(GLSL_FILE_RELA ${SHADER_DIR}/${BASE_NAME})

    set(SPV_BINARY_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/SpvBinary/Shaders/${GLSL_FILE_RELA}.spv")
    set(SPV_BINARY_CMD "${GLSLANG_PATH}" "--quiet" "--spirv-val" "--enhanced-msgs" "-g" "-gV" "-gVS" "-I${CMAKE_CURRENT_SOURCE_DIR}" "--target-env" "vulkan1.3" "-o" "${SPV_BINARY_FILE}" "${GLSL_FILE}")
    add_custom_command(OUTPUT ${SPV_BINARY_FILE} COMMAND ${SPV_BINARY_CMD} DEPENDS ${GLSL_FILE} ${GLSL_HEADER_FILES} COMMENT "${SPV_BINARY_CMD}")
    list(APPEND SPV_OUTPUT_FILES ${SPV_BINARY_FILE})
    source_group("Generated/SpvBinary/${SHADER_DIR}" FILES ${SPV_BINARY_FILE})

    set(SPV_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/Spv/Shaders/${GLSL_FILE_RELA}.spv.h")
    get_filename_component(FILE_NAME ${GLSL_FILE_RELA} NAME)
    string(REPLACE "." "_" FILENAME_WITH_UNDERSCORE ${FILE_NAME})
    set(SPV_CMD "${GLSLANG_PATH}" "--quiet" "--spirv-val" "--enhanced-msgs" "-g" "-gV" "-gVS" "-I${CMAKE_CURRENT_SOURCE_DIR}" "--target-env" "vulkan1.3" "-o" "${SPV_FILE}" "${GLSL_FILE}" "--vn" "SPV_${FILENAME_WITH_UNDERSCORE}")
    add_custom_command(OUTPUT ${SPV_FILE} COMMAND ${SPV_CMD} DEPENDS ${GLSL_FILE} ${GLSL_HEADER_FILES} COMMENT "${SPV_CMD}")
    list(APPEND SPV_OUTPUT_FILES ${SPV_FILE})
    list(APPEND SHADER_BYTE_OUTPUT_FILES ${SPV_FILE})
    source_group("Generated/Spv/${SHADER_DIR}" FILES ${SPV_FILE})

    if(False) # TODO
        set(HLSL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/Hlsl/Shaders/${GLSL_FILE_RELA}.hlsl")
        set(HLSI_CMD "${SPIRV_CROSS_PATH}" "--hlsl" "--output" "${HLSL_FILE}"  "${SPV_BINARY_FILE}")
        add_custom_command(OUTPUT ${HLSL_FILE} COMMAND ${HLSI_CMD} DEPENDS ${SPIRV_CROSS_PATH} ${SPV_BINARY_FILE} COMMENT "${HLSI_CMD}")
        list(APPEND SPV_OUTPUT_FILES ${HLSL_FILE})
        source_group("Generated/Hlsl/${SHADER_DIR}" FILES ${HLSL_FILE})
    
        get_filename_component(FILE_LAST_EXT ${GLSL_FILE_RELA} LAST_EXT)
        if (FILE_LAST_EXT STREQUAL ".frag")
            set(DXIL_PROFILE "ps_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".vert")
            set(DXIL_PROFILE "vs_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".geom")
            set(DXIL_PROFILE "gs_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".tesc")
            set(DXIL_PROFILE "hs_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".tese")
            set(DXIL_PROFILE "ds_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".comp")
            set(DXIL_PROFILE "cs_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".mesh")
            set(DXIL_PROFILE "ms_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".ampl")
            set(DXIL_PROFILE "as_6_6")
        elseif(FILE_LAST_EXT STREQUAL ".libs")
            set(DXIL_PROFILE "lib_6_6")
        else()
            message(FATAL_ERROR "Unrecognized shader satge ${FILE_LAST_EXT}")
        endif()
    
        set(DXIL_BINARY_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/DxilBinary/Shaders/${GLSL_FILE_RELA}.dxil")
        set(DXIL_BINARY_CMD "${DXC_PATH}" "-T" "${DXIL_PROFILE}" "-Fo" "${DXIL_BINARY_FILE}" "${HLSL_FILE}")
        add_custom_command(OUTPUT ${DXIL_BINARY_FILE} COMMAND ${DXIL_BINARY_CMD} DEPENDS ${DXC_PATH} ${HLSL_FILE} COMMENT "${DXIL_BINARY_CMD}")
        list(APPEND SPV_OUTPUT_FILES ${DXIL_BINARY_FILE})
        source_group("Generated/DxilBinary/${SHADER_DIR}" FILES ${DXIL_BINARY_FILE})
    
        set(DXIL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/Dxil/Shaders/${GLSL_FILE_RELA}.dxil.h")
        set(DXIL_CMD "${DXC_PATH}" "-T" "${DXIL_PROFILE}" "-Fh" "${DXIL_FILE}" "${HLSL_FILE}" "-Vn" "DXIL_${FILENAME_WITH_UNDERSCORE}")
        add_custom_command(OUTPUT ${DXIL_FILE} COMMAND ${DXIL_CMD} DEPENDS ${DXC_PATH} ${HLSL_FILE} COMMENT "${DXIL_CMD}")
        list(APPEND SPV_OUTPUT_FILES ${DXIL_FILE})
        list(APPEND SHADER_BYTE_OUTPUT_FILES ${DXIL_FILE})
        source_group("Generated/Dxil/${SHADER_DIR}" FILES ${DXIL_FILE})
    endif()
endforeach()

set(SHADER_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/../Generated/ShaderHeader.inl" )
set(SHADER_HEADER_SCRIPT ${CMAKE_SOURCE_DIR}/Tools/generate_shader_header.py)
add_custom_command(OUTPUT ${SHADER_HEADER} COMMAND python ${SHADER_HEADER_SCRIPT} DEPENDS ${SHADER_HEADER_SCRIPT} ${SHADER_BYTE_OUTPUT_FILES} COMMENT "Generating ${SHADER_HEADER}")
list(APPEND SPV_OUTPUT_FILES ${SHADER_HEADER})
source_group("Generated" FILES ${SHADER_HEADER})

add_library(${TARGET_NAME} INTERFACE ${SPV_OUTPUT_FILES})
set_target_properties(${TARGET_NAME} PROPERTIES FOLDER "Shaders")
target_sources(${TARGET_NAME} PRIVATE ${GLSL_SOURCE_FILES})
