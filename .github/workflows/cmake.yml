name: CMake

on:
  push:
    branches: [ "ci-debug" ]
  pull_request:
    branches: [ "ci-debug" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Add lunarg key for the repository
      run: wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
    - name: Update vulkan package 
      run: sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list http://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list
    - name: Configure apt update
      run: sudo apt update
    - name: Configure apt upgrade
      run: sudo apt upgrade
    - name: Configure Vulkan 3
      run: sudo apt install libvulkan-dev
      
    - name: Configure Python
      run: sudo apt install python3

    - name: Configure Ninja
      run: sudo apt install ninja-build
    
    - name: Configure clang
      run: sudo apt install clang
    
    - name: Configure chmod
      run: chmod +x Tools/Linux/*
      
    - name: Check version of clang
      run: clang --version
    - name: Check version of gcc
      run: gcc --version

    - name: Configure CMake clang
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/Build_clang -G "Ninja Multi-Config" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: Build Release clang
      run: cmake --build ${{github.workspace}}/Build_clang --config Release -- -j8
      
    - name: Build Debug clang
      run: cmake --build ${{github.workspace}}/Build_clang --config Debug -- -j8
      
    - name: Configure CMake gcc
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/Build_gcc -G "Ninja Multi-Config" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

    - name: Build Release gcc
      run: cmake --build ${{github.workspace}}/Build_gcc --config Release -- -j8
      
    - name: Build Debug gcc
      run: cmake --build ${{github.workspace}}/Build_gcc --config Debug -- -j8

    #- name: Test
     # working-directory: ${{github.workspace}}/build
      ## Execute tests defined by the CMake configuration.
      ## See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}

